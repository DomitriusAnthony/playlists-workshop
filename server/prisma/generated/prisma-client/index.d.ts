// Code generated by Prisma (prisma@1.23.0-test.3). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export interface Exists {
  media: (where?: MediaWhereInput) => Promise<boolean>;
  playlist: (where?: PlaylistWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  media: (where: MediaWhereUniqueInput) => MediaPromise;
  medias: (
    args?: {
      where?: MediaWhereInput;
      orderBy?: MediaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Media>;
  mediasConnection: (
    args?: {
      where?: MediaWhereInput;
      orderBy?: MediaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => MediaConnectionPromise;
  playlist: (where: PlaylistWhereUniqueInput) => PlaylistPromise;
  playlists: (
    args?: {
      where?: PlaylistWhereInput;
      orderBy?: PlaylistOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<Playlist>;
  playlistsConnection: (
    args?: {
      where?: PlaylistWhereInput;
      orderBy?: PlaylistOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => PlaylistConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserPromise;
  users: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => FragmentableArray<User>;
  usersConnection: (
    args?: {
      where?: UserWhereInput;
      orderBy?: UserOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createMedia: (data: MediaCreateInput) => MediaPromise;
  updateMedia: (
    args: { data: MediaUpdateInput; where: MediaWhereUniqueInput }
  ) => MediaPromise;
  updateManyMedias: (
    args: { data: MediaUpdateManyMutationInput; where?: MediaWhereInput }
  ) => BatchPayloadPromise;
  upsertMedia: (
    args: {
      where: MediaWhereUniqueInput;
      create: MediaCreateInput;
      update: MediaUpdateInput;
    }
  ) => MediaPromise;
  deleteMedia: (where: MediaWhereUniqueInput) => MediaPromise;
  deleteManyMedias: (where?: MediaWhereInput) => BatchPayloadPromise;
  createPlaylist: (data: PlaylistCreateInput) => PlaylistPromise;
  updatePlaylist: (
    args: { data: PlaylistUpdateInput; where: PlaylistWhereUniqueInput }
  ) => PlaylistPromise;
  updateManyPlaylists: (
    args: { data: PlaylistUpdateManyMutationInput; where?: PlaylistWhereInput }
  ) => BatchPayloadPromise;
  upsertPlaylist: (
    args: {
      where: PlaylistWhereUniqueInput;
      create: PlaylistCreateInput;
      update: PlaylistUpdateInput;
    }
  ) => PlaylistPromise;
  deletePlaylist: (where: PlaylistWhereUniqueInput) => PlaylistPromise;
  deleteManyPlaylists: (where?: PlaylistWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (
    args: { data: UserUpdateInput; where: UserWhereUniqueInput }
  ) => UserPromise;
  updateManyUsers: (
    args: { data: UserUpdateManyMutationInput; where?: UserWhereInput }
  ) => BatchPayloadPromise;
  upsertUser: (
    args: {
      where: UserWhereUniqueInput;
      create: UserCreateInput;
      update: UserUpdateInput;
    }
  ) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  media: (
    where?: MediaSubscriptionWhereInput
  ) => MediaSubscriptionPayloadSubscription;
  playlist: (
    where?: PlaylistSubscriptionWhereInput
  ) => PlaylistSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type MediaOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC"
  | "year_ASC"
  | "year_DESC"
  | "rated_ASC"
  | "rated_DESC"
  | "released_ASC"
  | "released_DESC"
  | "runtime_ASC"
  | "runtime_DESC"
  | "genre_ASC"
  | "genre_DESC"
  | "director_ASC"
  | "director_DESC"
  | "writer_ASC"
  | "writer_DESC"
  | "actors_ASC"
  | "actors_DESC"
  | "plot_ASC"
  | "plot_DESC"
  | "language_ASC"
  | "language_DESC"
  | "country_ASC"
  | "country_DESC"
  | "awards_ASC"
  | "awards_DESC"
  | "poster_ASC"
  | "poster_DESC"
  | "source_ASC"
  | "source_DESC"
  | "value_ASC"
  | "value_DESC"
  | "metascore_ASC"
  | "metascore_DESC"
  | "imdbRating_ASC"
  | "imdbRating_DESC"
  | "imdbVotes_ASC"
  | "imdbVotes_DESC"
  | "imdbID_ASC"
  | "imdbID_DESC"
  | "totalSeasons_ASC"
  | "totalSeasons_DESC"
  | "response_ASC"
  | "response_DESC";

export type PlaylistOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "title_ASC"
  | "title_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "username_ASC"
  | "username_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export interface MediaCreateManyInput {
  create?: MediaCreateInput[] | MediaCreateInput;
  connect?: MediaWhereUniqueInput[] | MediaWhereUniqueInput;
}

export type MediaWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
}>;

export interface MediaUpdateManyWithWhereNestedInput {
  where: MediaScalarWhereInput;
  data: MediaUpdateManyDataInput;
}

export interface UserUpdateWithoutPlaylistsDataInput {
  email?: String;
  password?: String;
  username?: String;
}

export interface MediaCreateInput {
  id?: ID_Input;
  title?: String;
  year?: String;
  rated?: String;
  released?: String;
  runtime?: String;
  genre?: String;
  director?: String;
  writer?: String;
  actors?: String;
  plot?: String;
  language?: String;
  country?: String;
  awards?: String;
  poster?: String;
  source?: String;
  value?: String;
  metascore?: String;
  imdbRating?: String;
  imdbVotes?: String;
  imdbID?: String;
  totalSeasons?: String;
  response?: String;
}

export interface PlaylistSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: PlaylistWhereInput;
  AND?: PlaylistSubscriptionWhereInput[] | PlaylistSubscriptionWhereInput;
}

export interface MediaUpdateInput {
  title?: String;
  year?: String;
  rated?: String;
  released?: String;
  runtime?: String;
  genre?: String;
  director?: String;
  writer?: String;
  actors?: String;
  plot?: String;
  language?: String;
  country?: String;
  awards?: String;
  poster?: String;
  source?: String;
  value?: String;
  metascore?: String;
  imdbRating?: String;
  imdbVotes?: String;
  imdbID?: String;
  totalSeasons?: String;
  response?: String;
}

export interface UserUpdateManyMutationInput {
  email?: String;
  password?: String;
  username?: String;
}

export interface MediaUpdateManyMutationInput {
  title?: String;
  year?: String;
  rated?: String;
  released?: String;
  runtime?: String;
  genre?: String;
  director?: String;
  writer?: String;
  actors?: String;
  plot?: String;
  language?: String;
  country?: String;
  awards?: String;
  poster?: String;
  source?: String;
  value?: String;
  metascore?: String;
  imdbRating?: String;
  imdbVotes?: String;
  imdbID?: String;
  totalSeasons?: String;
  response?: String;
}

export interface PlaylistUpdateManyDataInput {
  title?: String;
}

export interface PlaylistCreateManyWithoutOwnerInput {
  create?: PlaylistCreateWithoutOwnerInput[] | PlaylistCreateWithoutOwnerInput;
  connect?: PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput;
}

export interface PlaylistWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  owner?: UserWhereInput;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  media_some?: MediaWhereInput;
  AND?: PlaylistWhereInput[] | PlaylistWhereInput;
}

export interface UserCreateInput {
  id?: ID_Input;
  email: String;
  password: String;
  username: String;
  playlists?: PlaylistCreateManyWithoutOwnerInput;
}

export interface MediaWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  year?: String;
  year_not?: String;
  year_in?: String[] | String;
  year_not_in?: String[] | String;
  year_lt?: String;
  year_lte?: String;
  year_gt?: String;
  year_gte?: String;
  year_contains?: String;
  year_not_contains?: String;
  year_starts_with?: String;
  year_not_starts_with?: String;
  year_ends_with?: String;
  year_not_ends_with?: String;
  rated?: String;
  rated_not?: String;
  rated_in?: String[] | String;
  rated_not_in?: String[] | String;
  rated_lt?: String;
  rated_lte?: String;
  rated_gt?: String;
  rated_gte?: String;
  rated_contains?: String;
  rated_not_contains?: String;
  rated_starts_with?: String;
  rated_not_starts_with?: String;
  rated_ends_with?: String;
  rated_not_ends_with?: String;
  released?: String;
  released_not?: String;
  released_in?: String[] | String;
  released_not_in?: String[] | String;
  released_lt?: String;
  released_lte?: String;
  released_gt?: String;
  released_gte?: String;
  released_contains?: String;
  released_not_contains?: String;
  released_starts_with?: String;
  released_not_starts_with?: String;
  released_ends_with?: String;
  released_not_ends_with?: String;
  runtime?: String;
  runtime_not?: String;
  runtime_in?: String[] | String;
  runtime_not_in?: String[] | String;
  runtime_lt?: String;
  runtime_lte?: String;
  runtime_gt?: String;
  runtime_gte?: String;
  runtime_contains?: String;
  runtime_not_contains?: String;
  runtime_starts_with?: String;
  runtime_not_starts_with?: String;
  runtime_ends_with?: String;
  runtime_not_ends_with?: String;
  genre?: String;
  genre_not?: String;
  genre_in?: String[] | String;
  genre_not_in?: String[] | String;
  genre_lt?: String;
  genre_lte?: String;
  genre_gt?: String;
  genre_gte?: String;
  genre_contains?: String;
  genre_not_contains?: String;
  genre_starts_with?: String;
  genre_not_starts_with?: String;
  genre_ends_with?: String;
  genre_not_ends_with?: String;
  director?: String;
  director_not?: String;
  director_in?: String[] | String;
  director_not_in?: String[] | String;
  director_lt?: String;
  director_lte?: String;
  director_gt?: String;
  director_gte?: String;
  director_contains?: String;
  director_not_contains?: String;
  director_starts_with?: String;
  director_not_starts_with?: String;
  director_ends_with?: String;
  director_not_ends_with?: String;
  writer?: String;
  writer_not?: String;
  writer_in?: String[] | String;
  writer_not_in?: String[] | String;
  writer_lt?: String;
  writer_lte?: String;
  writer_gt?: String;
  writer_gte?: String;
  writer_contains?: String;
  writer_not_contains?: String;
  writer_starts_with?: String;
  writer_not_starts_with?: String;
  writer_ends_with?: String;
  writer_not_ends_with?: String;
  actors?: String;
  actors_not?: String;
  actors_in?: String[] | String;
  actors_not_in?: String[] | String;
  actors_lt?: String;
  actors_lte?: String;
  actors_gt?: String;
  actors_gte?: String;
  actors_contains?: String;
  actors_not_contains?: String;
  actors_starts_with?: String;
  actors_not_starts_with?: String;
  actors_ends_with?: String;
  actors_not_ends_with?: String;
  plot?: String;
  plot_not?: String;
  plot_in?: String[] | String;
  plot_not_in?: String[] | String;
  plot_lt?: String;
  plot_lte?: String;
  plot_gt?: String;
  plot_gte?: String;
  plot_contains?: String;
  plot_not_contains?: String;
  plot_starts_with?: String;
  plot_not_starts_with?: String;
  plot_ends_with?: String;
  plot_not_ends_with?: String;
  language?: String;
  language_not?: String;
  language_in?: String[] | String;
  language_not_in?: String[] | String;
  language_lt?: String;
  language_lte?: String;
  language_gt?: String;
  language_gte?: String;
  language_contains?: String;
  language_not_contains?: String;
  language_starts_with?: String;
  language_not_starts_with?: String;
  language_ends_with?: String;
  language_not_ends_with?: String;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  awards?: String;
  awards_not?: String;
  awards_in?: String[] | String;
  awards_not_in?: String[] | String;
  awards_lt?: String;
  awards_lte?: String;
  awards_gt?: String;
  awards_gte?: String;
  awards_contains?: String;
  awards_not_contains?: String;
  awards_starts_with?: String;
  awards_not_starts_with?: String;
  awards_ends_with?: String;
  awards_not_ends_with?: String;
  poster?: String;
  poster_not?: String;
  poster_in?: String[] | String;
  poster_not_in?: String[] | String;
  poster_lt?: String;
  poster_lte?: String;
  poster_gt?: String;
  poster_gte?: String;
  poster_contains?: String;
  poster_not_contains?: String;
  poster_starts_with?: String;
  poster_not_starts_with?: String;
  poster_ends_with?: String;
  poster_not_ends_with?: String;
  source?: String;
  source_not?: String;
  source_in?: String[] | String;
  source_not_in?: String[] | String;
  source_lt?: String;
  source_lte?: String;
  source_gt?: String;
  source_gte?: String;
  source_contains?: String;
  source_not_contains?: String;
  source_starts_with?: String;
  source_not_starts_with?: String;
  source_ends_with?: String;
  source_not_ends_with?: String;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  metascore?: String;
  metascore_not?: String;
  metascore_in?: String[] | String;
  metascore_not_in?: String[] | String;
  metascore_lt?: String;
  metascore_lte?: String;
  metascore_gt?: String;
  metascore_gte?: String;
  metascore_contains?: String;
  metascore_not_contains?: String;
  metascore_starts_with?: String;
  metascore_not_starts_with?: String;
  metascore_ends_with?: String;
  metascore_not_ends_with?: String;
  imdbRating?: String;
  imdbRating_not?: String;
  imdbRating_in?: String[] | String;
  imdbRating_not_in?: String[] | String;
  imdbRating_lt?: String;
  imdbRating_lte?: String;
  imdbRating_gt?: String;
  imdbRating_gte?: String;
  imdbRating_contains?: String;
  imdbRating_not_contains?: String;
  imdbRating_starts_with?: String;
  imdbRating_not_starts_with?: String;
  imdbRating_ends_with?: String;
  imdbRating_not_ends_with?: String;
  imdbVotes?: String;
  imdbVotes_not?: String;
  imdbVotes_in?: String[] | String;
  imdbVotes_not_in?: String[] | String;
  imdbVotes_lt?: String;
  imdbVotes_lte?: String;
  imdbVotes_gt?: String;
  imdbVotes_gte?: String;
  imdbVotes_contains?: String;
  imdbVotes_not_contains?: String;
  imdbVotes_starts_with?: String;
  imdbVotes_not_starts_with?: String;
  imdbVotes_ends_with?: String;
  imdbVotes_not_ends_with?: String;
  imdbID?: String;
  imdbID_not?: String;
  imdbID_in?: String[] | String;
  imdbID_not_in?: String[] | String;
  imdbID_lt?: String;
  imdbID_lte?: String;
  imdbID_gt?: String;
  imdbID_gte?: String;
  imdbID_contains?: String;
  imdbID_not_contains?: String;
  imdbID_starts_with?: String;
  imdbID_not_starts_with?: String;
  imdbID_ends_with?: String;
  imdbID_not_ends_with?: String;
  totalSeasons?: String;
  totalSeasons_not?: String;
  totalSeasons_in?: String[] | String;
  totalSeasons_not_in?: String[] | String;
  totalSeasons_lt?: String;
  totalSeasons_lte?: String;
  totalSeasons_gt?: String;
  totalSeasons_gte?: String;
  totalSeasons_contains?: String;
  totalSeasons_not_contains?: String;
  totalSeasons_starts_with?: String;
  totalSeasons_not_starts_with?: String;
  totalSeasons_ends_with?: String;
  totalSeasons_not_ends_with?: String;
  response?: String;
  response_not?: String;
  response_in?: String[] | String;
  response_not_in?: String[] | String;
  response_lt?: String;
  response_lte?: String;
  response_gt?: String;
  response_gte?: String;
  response_contains?: String;
  response_not_contains?: String;
  response_starts_with?: String;
  response_not_starts_with?: String;
  response_ends_with?: String;
  response_not_ends_with?: String;
  AND?: MediaWhereInput[] | MediaWhereInput;
}

export interface PlaylistCreateInput {
  id?: ID_Input;
  owner: UserCreateOneWithoutPlaylistsInput;
  title: String;
  media?: MediaCreateManyInput;
}

export interface PlaylistUpsertWithWhereUniqueWithoutOwnerInput {
  where: PlaylistWhereUniqueInput;
  update: PlaylistUpdateWithoutOwnerDataInput;
  create: PlaylistCreateWithoutOwnerInput;
}

export interface UserCreateOneWithoutPlaylistsInput {
  create?: UserCreateWithoutPlaylistsInput;
  connect?: UserWhereUniqueInput;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  email?: String;
  password?: String;
}>;

export interface UserCreateWithoutPlaylistsInput {
  id?: ID_Input;
  email: String;
  password: String;
  username: String;
}

export interface PlaylistUpdateManyWithoutOwnerInput {
  create?: PlaylistCreateWithoutOwnerInput[] | PlaylistCreateWithoutOwnerInput;
  delete?: PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput;
  connect?: PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput;
  set?: PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput;
  disconnect?: PlaylistWhereUniqueInput[] | PlaylistWhereUniqueInput;
  update?:
    | PlaylistUpdateWithWhereUniqueWithoutOwnerInput[]
    | PlaylistUpdateWithWhereUniqueWithoutOwnerInput;
  upsert?:
    | PlaylistUpsertWithWhereUniqueWithoutOwnerInput[]
    | PlaylistUpsertWithWhereUniqueWithoutOwnerInput;
  deleteMany?: PlaylistScalarWhereInput[] | PlaylistScalarWhereInput;
  updateMany?:
    | PlaylistUpdateManyWithWhereNestedInput[]
    | PlaylistUpdateManyWithWhereNestedInput;
}

export interface PlaylistUpdateManyMutationInput {
  title?: String;
}

export interface PlaylistCreateWithoutOwnerInput {
  id?: ID_Input;
  title: String;
  media?: MediaCreateManyInput;
}

export interface PlaylistUpdateInput {
  owner?: UserUpdateOneRequiredWithoutPlaylistsInput;
  title?: String;
  media?: MediaUpdateManyInput;
}

export interface MediaSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: MediaWhereInput;
  AND?: MediaSubscriptionWhereInput[] | MediaSubscriptionWhereInput;
}

export interface UserUpdateOneRequiredWithoutPlaylistsInput {
  create?: UserCreateWithoutPlaylistsInput;
  update?: UserUpdateWithoutPlaylistsDataInput;
  upsert?: UserUpsertWithoutPlaylistsInput;
  connect?: UserWhereUniqueInput;
}

export interface PlaylistUpdateManyWithWhereNestedInput {
  where: PlaylistScalarWhereInput;
  data: PlaylistUpdateManyDataInput;
}

export interface MediaUpdateManyDataInput {
  title?: String;
  year?: String;
  rated?: String;
  released?: String;
  runtime?: String;
  genre?: String;
  director?: String;
  writer?: String;
  actors?: String;
  plot?: String;
  language?: String;
  country?: String;
  awards?: String;
  poster?: String;
  source?: String;
  value?: String;
  metascore?: String;
  imdbRating?: String;
  imdbVotes?: String;
  imdbID?: String;
  totalSeasons?: String;
  response?: String;
}

export interface PlaylistScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  AND?: PlaylistScalarWhereInput[] | PlaylistScalarWhereInput;
  OR?: PlaylistScalarWhereInput[] | PlaylistScalarWhereInput;
  NOT?: PlaylistScalarWhereInput[] | PlaylistScalarWhereInput;
}

export interface UserUpsertWithoutPlaylistsInput {
  update: UserUpdateWithoutPlaylistsDataInput;
  create: UserCreateWithoutPlaylistsInput;
}

export interface PlaylistUpdateWithWhereUniqueWithoutOwnerInput {
  where: PlaylistWhereUniqueInput;
  data: PlaylistUpdateWithoutOwnerDataInput;
}

export interface MediaUpdateManyInput {
  create?: MediaCreateInput[] | MediaCreateInput;
  update?:
    | MediaUpdateWithWhereUniqueNestedInput[]
    | MediaUpdateWithWhereUniqueNestedInput;
  upsert?:
    | MediaUpsertWithWhereUniqueNestedInput[]
    | MediaUpsertWithWhereUniqueNestedInput;
  delete?: MediaWhereUniqueInput[] | MediaWhereUniqueInput;
  connect?: MediaWhereUniqueInput[] | MediaWhereUniqueInput;
  set?: MediaWhereUniqueInput[] | MediaWhereUniqueInput;
  disconnect?: MediaWhereUniqueInput[] | MediaWhereUniqueInput;
  deleteMany?: MediaScalarWhereInput[] | MediaScalarWhereInput;
  updateMany?:
    | MediaUpdateManyWithWhereNestedInput[]
    | MediaUpdateManyWithWhereNestedInput;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: MutationType[] | MutationType;
  updatedFields_contains?: String;
  updatedFields_contains_every?: String[] | String;
  updatedFields_contains_some?: String[] | String;
  node?: UserWhereInput;
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput;
}

export interface MediaScalarWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  title?: String;
  title_not?: String;
  title_in?: String[] | String;
  title_not_in?: String[] | String;
  title_lt?: String;
  title_lte?: String;
  title_gt?: String;
  title_gte?: String;
  title_contains?: String;
  title_not_contains?: String;
  title_starts_with?: String;
  title_not_starts_with?: String;
  title_ends_with?: String;
  title_not_ends_with?: String;
  year?: String;
  year_not?: String;
  year_in?: String[] | String;
  year_not_in?: String[] | String;
  year_lt?: String;
  year_lte?: String;
  year_gt?: String;
  year_gte?: String;
  year_contains?: String;
  year_not_contains?: String;
  year_starts_with?: String;
  year_not_starts_with?: String;
  year_ends_with?: String;
  year_not_ends_with?: String;
  rated?: String;
  rated_not?: String;
  rated_in?: String[] | String;
  rated_not_in?: String[] | String;
  rated_lt?: String;
  rated_lte?: String;
  rated_gt?: String;
  rated_gte?: String;
  rated_contains?: String;
  rated_not_contains?: String;
  rated_starts_with?: String;
  rated_not_starts_with?: String;
  rated_ends_with?: String;
  rated_not_ends_with?: String;
  released?: String;
  released_not?: String;
  released_in?: String[] | String;
  released_not_in?: String[] | String;
  released_lt?: String;
  released_lte?: String;
  released_gt?: String;
  released_gte?: String;
  released_contains?: String;
  released_not_contains?: String;
  released_starts_with?: String;
  released_not_starts_with?: String;
  released_ends_with?: String;
  released_not_ends_with?: String;
  runtime?: String;
  runtime_not?: String;
  runtime_in?: String[] | String;
  runtime_not_in?: String[] | String;
  runtime_lt?: String;
  runtime_lte?: String;
  runtime_gt?: String;
  runtime_gte?: String;
  runtime_contains?: String;
  runtime_not_contains?: String;
  runtime_starts_with?: String;
  runtime_not_starts_with?: String;
  runtime_ends_with?: String;
  runtime_not_ends_with?: String;
  genre?: String;
  genre_not?: String;
  genre_in?: String[] | String;
  genre_not_in?: String[] | String;
  genre_lt?: String;
  genre_lte?: String;
  genre_gt?: String;
  genre_gte?: String;
  genre_contains?: String;
  genre_not_contains?: String;
  genre_starts_with?: String;
  genre_not_starts_with?: String;
  genre_ends_with?: String;
  genre_not_ends_with?: String;
  director?: String;
  director_not?: String;
  director_in?: String[] | String;
  director_not_in?: String[] | String;
  director_lt?: String;
  director_lte?: String;
  director_gt?: String;
  director_gte?: String;
  director_contains?: String;
  director_not_contains?: String;
  director_starts_with?: String;
  director_not_starts_with?: String;
  director_ends_with?: String;
  director_not_ends_with?: String;
  writer?: String;
  writer_not?: String;
  writer_in?: String[] | String;
  writer_not_in?: String[] | String;
  writer_lt?: String;
  writer_lte?: String;
  writer_gt?: String;
  writer_gte?: String;
  writer_contains?: String;
  writer_not_contains?: String;
  writer_starts_with?: String;
  writer_not_starts_with?: String;
  writer_ends_with?: String;
  writer_not_ends_with?: String;
  actors?: String;
  actors_not?: String;
  actors_in?: String[] | String;
  actors_not_in?: String[] | String;
  actors_lt?: String;
  actors_lte?: String;
  actors_gt?: String;
  actors_gte?: String;
  actors_contains?: String;
  actors_not_contains?: String;
  actors_starts_with?: String;
  actors_not_starts_with?: String;
  actors_ends_with?: String;
  actors_not_ends_with?: String;
  plot?: String;
  plot_not?: String;
  plot_in?: String[] | String;
  plot_not_in?: String[] | String;
  plot_lt?: String;
  plot_lte?: String;
  plot_gt?: String;
  plot_gte?: String;
  plot_contains?: String;
  plot_not_contains?: String;
  plot_starts_with?: String;
  plot_not_starts_with?: String;
  plot_ends_with?: String;
  plot_not_ends_with?: String;
  language?: String;
  language_not?: String;
  language_in?: String[] | String;
  language_not_in?: String[] | String;
  language_lt?: String;
  language_lte?: String;
  language_gt?: String;
  language_gte?: String;
  language_contains?: String;
  language_not_contains?: String;
  language_starts_with?: String;
  language_not_starts_with?: String;
  language_ends_with?: String;
  language_not_ends_with?: String;
  country?: String;
  country_not?: String;
  country_in?: String[] | String;
  country_not_in?: String[] | String;
  country_lt?: String;
  country_lte?: String;
  country_gt?: String;
  country_gte?: String;
  country_contains?: String;
  country_not_contains?: String;
  country_starts_with?: String;
  country_not_starts_with?: String;
  country_ends_with?: String;
  country_not_ends_with?: String;
  awards?: String;
  awards_not?: String;
  awards_in?: String[] | String;
  awards_not_in?: String[] | String;
  awards_lt?: String;
  awards_lte?: String;
  awards_gt?: String;
  awards_gte?: String;
  awards_contains?: String;
  awards_not_contains?: String;
  awards_starts_with?: String;
  awards_not_starts_with?: String;
  awards_ends_with?: String;
  awards_not_ends_with?: String;
  poster?: String;
  poster_not?: String;
  poster_in?: String[] | String;
  poster_not_in?: String[] | String;
  poster_lt?: String;
  poster_lte?: String;
  poster_gt?: String;
  poster_gte?: String;
  poster_contains?: String;
  poster_not_contains?: String;
  poster_starts_with?: String;
  poster_not_starts_with?: String;
  poster_ends_with?: String;
  poster_not_ends_with?: String;
  source?: String;
  source_not?: String;
  source_in?: String[] | String;
  source_not_in?: String[] | String;
  source_lt?: String;
  source_lte?: String;
  source_gt?: String;
  source_gte?: String;
  source_contains?: String;
  source_not_contains?: String;
  source_starts_with?: String;
  source_not_starts_with?: String;
  source_ends_with?: String;
  source_not_ends_with?: String;
  value?: String;
  value_not?: String;
  value_in?: String[] | String;
  value_not_in?: String[] | String;
  value_lt?: String;
  value_lte?: String;
  value_gt?: String;
  value_gte?: String;
  value_contains?: String;
  value_not_contains?: String;
  value_starts_with?: String;
  value_not_starts_with?: String;
  value_ends_with?: String;
  value_not_ends_with?: String;
  metascore?: String;
  metascore_not?: String;
  metascore_in?: String[] | String;
  metascore_not_in?: String[] | String;
  metascore_lt?: String;
  metascore_lte?: String;
  metascore_gt?: String;
  metascore_gte?: String;
  metascore_contains?: String;
  metascore_not_contains?: String;
  metascore_starts_with?: String;
  metascore_not_starts_with?: String;
  metascore_ends_with?: String;
  metascore_not_ends_with?: String;
  imdbRating?: String;
  imdbRating_not?: String;
  imdbRating_in?: String[] | String;
  imdbRating_not_in?: String[] | String;
  imdbRating_lt?: String;
  imdbRating_lte?: String;
  imdbRating_gt?: String;
  imdbRating_gte?: String;
  imdbRating_contains?: String;
  imdbRating_not_contains?: String;
  imdbRating_starts_with?: String;
  imdbRating_not_starts_with?: String;
  imdbRating_ends_with?: String;
  imdbRating_not_ends_with?: String;
  imdbVotes?: String;
  imdbVotes_not?: String;
  imdbVotes_in?: String[] | String;
  imdbVotes_not_in?: String[] | String;
  imdbVotes_lt?: String;
  imdbVotes_lte?: String;
  imdbVotes_gt?: String;
  imdbVotes_gte?: String;
  imdbVotes_contains?: String;
  imdbVotes_not_contains?: String;
  imdbVotes_starts_with?: String;
  imdbVotes_not_starts_with?: String;
  imdbVotes_ends_with?: String;
  imdbVotes_not_ends_with?: String;
  imdbID?: String;
  imdbID_not?: String;
  imdbID_in?: String[] | String;
  imdbID_not_in?: String[] | String;
  imdbID_lt?: String;
  imdbID_lte?: String;
  imdbID_gt?: String;
  imdbID_gte?: String;
  imdbID_contains?: String;
  imdbID_not_contains?: String;
  imdbID_starts_with?: String;
  imdbID_not_starts_with?: String;
  imdbID_ends_with?: String;
  imdbID_not_ends_with?: String;
  totalSeasons?: String;
  totalSeasons_not?: String;
  totalSeasons_in?: String[] | String;
  totalSeasons_not_in?: String[] | String;
  totalSeasons_lt?: String;
  totalSeasons_lte?: String;
  totalSeasons_gt?: String;
  totalSeasons_gte?: String;
  totalSeasons_contains?: String;
  totalSeasons_not_contains?: String;
  totalSeasons_starts_with?: String;
  totalSeasons_not_starts_with?: String;
  totalSeasons_ends_with?: String;
  totalSeasons_not_ends_with?: String;
  response?: String;
  response_not?: String;
  response_in?: String[] | String;
  response_not_in?: String[] | String;
  response_lt?: String;
  response_lte?: String;
  response_gt?: String;
  response_gte?: String;
  response_contains?: String;
  response_not_contains?: String;
  response_starts_with?: String;
  response_not_starts_with?: String;
  response_ends_with?: String;
  response_not_ends_with?: String;
  AND?: MediaScalarWhereInput[] | MediaScalarWhereInput;
  OR?: MediaScalarWhereInput[] | MediaScalarWhereInput;
  NOT?: MediaScalarWhereInput[] | MediaScalarWhereInput;
}

export interface MediaUpsertWithWhereUniqueNestedInput {
  where: MediaWhereUniqueInput;
  update: MediaUpdateDataInput;
  create: MediaCreateInput;
}

export interface MediaUpdateDataInput {
  title?: String;
  year?: String;
  rated?: String;
  released?: String;
  runtime?: String;
  genre?: String;
  director?: String;
  writer?: String;
  actors?: String;
  plot?: String;
  language?: String;
  country?: String;
  awards?: String;
  poster?: String;
  source?: String;
  value?: String;
  metascore?: String;
  imdbRating?: String;
  imdbVotes?: String;
  imdbID?: String;
  totalSeasons?: String;
  response?: String;
}

export interface MediaUpdateWithWhereUniqueNestedInput {
  where: MediaWhereUniqueInput;
  data: MediaUpdateDataInput;
}

export type PlaylistWhereUniqueInput = AtLeastOne<{
  id: ID_Input;
  title?: String;
}>;

export interface UserUpdateInput {
  email?: String;
  password?: String;
  username?: String;
  playlists?: PlaylistUpdateManyWithoutOwnerInput;
}

export interface PlaylistUpdateWithoutOwnerDataInput {
  title?: String;
  media?: MediaUpdateManyInput;
}

export interface UserWhereInput {
  id?: ID_Input;
  id_not?: ID_Input;
  id_in?: ID_Input[] | ID_Input;
  id_not_in?: ID_Input[] | ID_Input;
  id_lt?: ID_Input;
  id_lte?: ID_Input;
  id_gt?: ID_Input;
  id_gte?: ID_Input;
  id_contains?: ID_Input;
  id_not_contains?: ID_Input;
  id_starts_with?: ID_Input;
  id_not_starts_with?: ID_Input;
  id_ends_with?: ID_Input;
  id_not_ends_with?: ID_Input;
  email?: String;
  email_not?: String;
  email_in?: String[] | String;
  email_not_in?: String[] | String;
  email_lt?: String;
  email_lte?: String;
  email_gt?: String;
  email_gte?: String;
  email_contains?: String;
  email_not_contains?: String;
  email_starts_with?: String;
  email_not_starts_with?: String;
  email_ends_with?: String;
  email_not_ends_with?: String;
  password?: String;
  password_not?: String;
  password_in?: String[] | String;
  password_not_in?: String[] | String;
  password_lt?: String;
  password_lte?: String;
  password_gt?: String;
  password_gte?: String;
  password_contains?: String;
  password_not_contains?: String;
  password_starts_with?: String;
  password_not_starts_with?: String;
  password_ends_with?: String;
  password_not_ends_with?: String;
  username?: String;
  username_not?: String;
  username_in?: String[] | String;
  username_not_in?: String[] | String;
  username_lt?: String;
  username_lte?: String;
  username_gt?: String;
  username_gte?: String;
  username_contains?: String;
  username_not_contains?: String;
  username_starts_with?: String;
  username_not_starts_with?: String;
  username_ends_with?: String;
  username_not_ends_with?: String;
  playlists_some?: PlaylistWhereInput;
  AND?: UserWhereInput[] | UserWhereInput;
}

export interface NodeNode {
  id: ID_Output;
}

export interface UserPreviousValues {
  id: ID_Output;
  email: String;
  password: String;
  username: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  username: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
}

export interface Playlist {
  id: ID_Output;
  title: String;
}

export interface PlaylistPromise extends Promise<Playlist>, Fragmentable {
  id: () => Promise<ID_Output>;
  owner: <T = UserPromise>() => T;
  title: () => Promise<String>;
  media: <T = FragmentableArray<Media>>(
    args?: {
      where?: MediaWhereInput;
      orderBy?: MediaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PlaylistSubscription
  extends Promise<AsyncIterator<Playlist>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  owner: <T = UserSubscription>() => T;
  title: () => Promise<AsyncIterator<String>>;
  media: <T = Promise<AsyncIterator<MediaSubscription>>>(
    args?: {
      where?: MediaWhereInput;
      orderBy?: MediaOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface MediaConnection {
  pageInfo: PageInfo;
  edges: MediaEdge[];
}

export interface MediaConnectionPromise
  extends Promise<MediaConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<MediaEdge>>() => T;
  aggregate: <T = AggregateMediaPromise>() => T;
}

export interface MediaConnectionSubscription
  extends Promise<AsyncIterator<MediaConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<MediaEdgeSubscription>>>() => T;
  aggregate: <T = AggregateMediaSubscription>() => T;
}

export interface User {
  id: ID_Output;
  email: String;
  password: String;
  username: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  username: () => Promise<String>;
  playlists: <T = FragmentableArray<Playlist>>(
    args?: {
      where?: PlaylistWhereInput;
      orderBy?: PlaylistOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  username: () => Promise<AsyncIterator<String>>;
  playlists: <T = Promise<AsyncIterator<PlaylistSubscription>>>(
    args?: {
      where?: PlaylistWhereInput;
      orderBy?: PlaylistOrderByInput;
      skip?: Int;
      after?: String;
      before?: String;
      first?: Int;
      last?: Int;
    }
  ) => T;
}

export interface PlaylistSubscriptionPayload {
  mutation: MutationType;
  node: Playlist;
  updatedFields: String[];
  previousValues: PlaylistPreviousValues;
}

export interface PlaylistSubscriptionPayloadPromise
  extends Promise<PlaylistSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PlaylistPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PlaylistPreviousValuesPromise>() => T;
}

export interface PlaylistSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PlaylistSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PlaylistSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PlaylistPreviousValuesSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateMedia {
  count: Int;
}

export interface AggregateMediaPromise
  extends Promise<AggregateMedia>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateMediaSubscription
  extends Promise<AsyncIterator<AggregateMedia>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface MediaEdge {
  node: Media;
  cursor: String;
}

export interface MediaEdgePromise extends Promise<MediaEdge>, Fragmentable {
  node: <T = MediaPromise>() => T;
  cursor: () => Promise<String>;
}

export interface MediaEdgeSubscription
  extends Promise<AsyncIterator<MediaEdge>>,
    Fragmentable {
  node: <T = MediaSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface PlaylistEdge {
  node: Playlist;
  cursor: String;
}

export interface PlaylistEdgePromise
  extends Promise<PlaylistEdge>,
    Fragmentable {
  node: <T = PlaylistPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PlaylistEdgeSubscription
  extends Promise<AsyncIterator<PlaylistEdge>>,
    Fragmentable {
  node: <T = PlaylistSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PlaylistPreviousValues {
  id: ID_Output;
  title: String;
}

export interface PlaylistPreviousValuesPromise
  extends Promise<PlaylistPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
}

export interface PlaylistPreviousValuesSubscription
  extends Promise<AsyncIterator<PlaylistPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
}

export interface MediaPreviousValues {
  id: ID_Output;
  title?: String;
  year?: String;
  rated?: String;
  released?: String;
  runtime?: String;
  genre?: String;
  director?: String;
  writer?: String;
  actors?: String;
  plot?: String;
  language?: String;
  country?: String;
  awards?: String;
  poster?: String;
  source?: String;
  value?: String;
  metascore?: String;
  imdbRating?: String;
  imdbVotes?: String;
  imdbID?: String;
  totalSeasons?: String;
  response?: String;
}

export interface MediaPreviousValuesPromise
  extends Promise<MediaPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  year: () => Promise<String>;
  rated: () => Promise<String>;
  released: () => Promise<String>;
  runtime: () => Promise<String>;
  genre: () => Promise<String>;
  director: () => Promise<String>;
  writer: () => Promise<String>;
  actors: () => Promise<String>;
  plot: () => Promise<String>;
  language: () => Promise<String>;
  country: () => Promise<String>;
  awards: () => Promise<String>;
  poster: () => Promise<String>;
  source: () => Promise<String>;
  value: () => Promise<String>;
  metascore: () => Promise<String>;
  imdbRating: () => Promise<String>;
  imdbVotes: () => Promise<String>;
  imdbID: () => Promise<String>;
  totalSeasons: () => Promise<String>;
  response: () => Promise<String>;
}

export interface MediaPreviousValuesSubscription
  extends Promise<AsyncIterator<MediaPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  year: () => Promise<AsyncIterator<String>>;
  rated: () => Promise<AsyncIterator<String>>;
  released: () => Promise<AsyncIterator<String>>;
  runtime: () => Promise<AsyncIterator<String>>;
  genre: () => Promise<AsyncIterator<String>>;
  director: () => Promise<AsyncIterator<String>>;
  writer: () => Promise<AsyncIterator<String>>;
  actors: () => Promise<AsyncIterator<String>>;
  plot: () => Promise<AsyncIterator<String>>;
  language: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  awards: () => Promise<AsyncIterator<String>>;
  poster: () => Promise<AsyncIterator<String>>;
  source: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
  metascore: () => Promise<AsyncIterator<String>>;
  imdbRating: () => Promise<AsyncIterator<String>>;
  imdbVotes: () => Promise<AsyncIterator<String>>;
  imdbID: () => Promise<AsyncIterator<String>>;
  totalSeasons: () => Promise<AsyncIterator<String>>;
  response: () => Promise<AsyncIterator<String>>;
}

export interface MediaSubscriptionPayload {
  mutation: MutationType;
  node: Media;
  updatedFields: String[];
  previousValues: MediaPreviousValues;
}

export interface MediaSubscriptionPayloadPromise
  extends Promise<MediaSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = MediaPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = MediaPreviousValuesPromise>() => T;
}

export interface MediaSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<MediaSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = MediaSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = MediaPreviousValuesSubscription>() => T;
}

export interface Media {
  id: ID_Output;
  title?: String;
  year?: String;
  rated?: String;
  released?: String;
  runtime?: String;
  genre?: String;
  director?: String;
  writer?: String;
  actors?: String;
  plot?: String;
  language?: String;
  country?: String;
  awards?: String;
  poster?: String;
  source?: String;
  value?: String;
  metascore?: String;
  imdbRating?: String;
  imdbVotes?: String;
  imdbID?: String;
  totalSeasons?: String;
  response?: String;
}

export interface MediaPromise extends Promise<Media>, Fragmentable {
  id: () => Promise<ID_Output>;
  title: () => Promise<String>;
  year: () => Promise<String>;
  rated: () => Promise<String>;
  released: () => Promise<String>;
  runtime: () => Promise<String>;
  genre: () => Promise<String>;
  director: () => Promise<String>;
  writer: () => Promise<String>;
  actors: () => Promise<String>;
  plot: () => Promise<String>;
  language: () => Promise<String>;
  country: () => Promise<String>;
  awards: () => Promise<String>;
  poster: () => Promise<String>;
  source: () => Promise<String>;
  value: () => Promise<String>;
  metascore: () => Promise<String>;
  imdbRating: () => Promise<String>;
  imdbVotes: () => Promise<String>;
  imdbID: () => Promise<String>;
  totalSeasons: () => Promise<String>;
  response: () => Promise<String>;
}

export interface MediaSubscription
  extends Promise<AsyncIterator<Media>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  title: () => Promise<AsyncIterator<String>>;
  year: () => Promise<AsyncIterator<String>>;
  rated: () => Promise<AsyncIterator<String>>;
  released: () => Promise<AsyncIterator<String>>;
  runtime: () => Promise<AsyncIterator<String>>;
  genre: () => Promise<AsyncIterator<String>>;
  director: () => Promise<AsyncIterator<String>>;
  writer: () => Promise<AsyncIterator<String>>;
  actors: () => Promise<AsyncIterator<String>>;
  plot: () => Promise<AsyncIterator<String>>;
  language: () => Promise<AsyncIterator<String>>;
  country: () => Promise<AsyncIterator<String>>;
  awards: () => Promise<AsyncIterator<String>>;
  poster: () => Promise<AsyncIterator<String>>;
  source: () => Promise<AsyncIterator<String>>;
  value: () => Promise<AsyncIterator<String>>;
  metascore: () => Promise<AsyncIterator<String>>;
  imdbRating: () => Promise<AsyncIterator<String>>;
  imdbVotes: () => Promise<AsyncIterator<String>>;
  imdbID: () => Promise<AsyncIterator<String>>;
  totalSeasons: () => Promise<AsyncIterator<String>>;
  response: () => Promise<AsyncIterator<String>>;
}

export interface PlaylistConnection {
  pageInfo: PageInfo;
  edges: PlaylistEdge[];
}

export interface PlaylistConnectionPromise
  extends Promise<PlaylistConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PlaylistEdge>>() => T;
  aggregate: <T = AggregatePlaylistPromise>() => T;
}

export interface PlaylistConnectionSubscription
  extends Promise<AsyncIterator<PlaylistConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PlaylistEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePlaylistSubscription>() => T;
}

export interface AggregatePlaylist {
  count: Int;
}

export interface AggregatePlaylistPromise
  extends Promise<AggregatePlaylist>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePlaylistSubscription
  extends Promise<AsyncIterator<AggregatePlaylist>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "Media",
    embedded: false
  },
  {
    name: "Playlist",
    embedded: false
  },
  {
    name: "User",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
